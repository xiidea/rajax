{"name":"Rajax","tagline":"A javascript iframe form submit with styled file input support","body":"Rajax\r\n=====\r\nA javascript library to handle ajax like form submit. Please use as you wish at your own risk.\r\n\r\n\r\nKey Features\r\n============\r\n* Easy to integrate with any form\r\n* Supports Styled File Input\r\n* Any styled Html element can be used as File Input\r\n* Styled File Input Can be used within any form\r\n* Supports File Input type validation\r\n* Ajax like form submit with custom data\r\n* No data size limitation\r\n* Cross domain communication using name transport\r\n \r\n\r\nCurrent Active Version\r\n======================\r\nv 3.3\r\n\r\n \r\nUSES and Cookbook\r\n=================\r\n* **Basic Uses, Submit your form and do something after the request completed**\r\n```javascript\r\n    var rajax_obj = new Rajax('my-form-id',\r\n    {\r\n        autoSubmit:true,\r\n        onComplete:function(response) {\r\n                //Complete Actions\r\n        }\r\n    });\r\n```\r\n\r\n* **Basic use Styled File Input Only**\r\n```javascript\r\n        var sInput = new SFileInput('input_name', {\r\n    \t\t\tbutton:'element_id',    //The element ID you want to use as file input\r\n    \t});\r\n ```\r\n\r\n* **Use Rajax with styled file input**\r\n\r\n```javascript\r\n    var rajax_obj=new Rajax(form,\r\n     {\r\n         finputs: {                             //All Styled file input options, user input_name as key\r\n            input_name_1: {                     //input_name_1 will be the name of your input field\r\n                button:'file_uploader_element1'\r\n            },\r\n            input_name_2: {\r\n                button:'file_uploader_element2'\r\n            }\r\n          },\r\n         autoSubmit:true,\r\n         onComplete:function(response) {\r\n                 //Complete Actions\r\n         }\r\n     });\r\n ```\r\n\r\n* **Use with other libraries which bind to the form submit event\r\n```javascript\r\n    var rajax_obj = new Rajax('my-form-id',\r\n    {\r\n        //autoSubmit : false,       //Default value is false, you can omit this option\r\n        onComplete : function(response) {\r\n                //Complete Actions\r\n        }\r\n    });\r\n\r\n    rajax_obj.post();   //Trigger submitting the form manually\r\n```\r\n\r\n* **Use without a form!**\r\n```javascript\r\n    var rajax_obj = new Rajax('',\r\n    {\r\n        onComplete : function(response) {\r\n                //Complete Actions\r\n        }\r\n    });\r\n\r\n    rajax_obj.post();   //Trigger submitting the form manually\r\n```\r\n\r\n* **Cross domain Implementation**\r\n\r\nCross domain communication need some extra scripting and its till experimental. only checked on FF10, IE9, Chrome17. Hope fully it should work on other version of browser. To perform cross browser submission you need to follow the steps bellow:\r\n\r\n* Place **blank.html** file in your working directory or any other location and assign as **localResource** value.\r\n                                                                                                       \r\n```javascript\r\n    var rajax_obj=new rajax(form,\r\n      {\r\n    \t  localResource:\"path/to/local/blank.html\"\r\n      });\r\n ```\r\n\r\n* Remote Server Scripting: You need to add a javascript code on the page of remote domain\r\n\r\nTo pass Your Message\r\n```html\r\n    <script>\r\n    \twindow.name=\"Your Message Here\";\r\n    </script>\r\n ```\r\n\r\nor To pass Full Body Content\r\n ```html\r\n    <html>\r\n        <body>\r\n            Your Message Here\r\n        </body>\r\n        <script>\r\n            window.name=document.getElementsByTagName('body')[0].innerHTML;\r\n        </script>\r\n    <html>\r\n ```\r\n\r\nRajax Options:\r\n--------------\r\n* **action**  \r\ntype: string  \r\ndefault : null  \r\nLocation of the server-side script. omit it if you like to use the form action attribute instead\r\n\r\n* **data**  \r\nType: PlainObject  \r\nAdditional data to be sent to the server as {name:value} pair\r\n\r\n* **responseType**  \r\ntype: string  \r\nThe type of data that you're expecting back from the server. html and xml are detected automatically. Only useful when you are using json data as a response. Set to \"json\" in that case.\r\n\r\n* **noCache**  \r\ntype: boolean  \r\ndefault : true  \r\nunify the request with random integer when set to false. Useful when you are submitting nothing and accessing a url.\r\n\r\n* **finputs**  \r\ntype: Object  \r\ndefault : {}  \r\nSTYLED BUTTON REFERENCE Will Be used as file input. This section contain all Styled Input Button settings\r\n\r\n* **autoSubmit**  \r\ntype: boolean  \r\ndefault : false  \r\nAuto submitting form means submit trigger upon form submit event. Default disable, make it safe to work with other library\r\n\r\n* **onBeforeSubmit**  \r\nType: Function( Rajax rajaxObject)  \r\nA function to be called when the request being prepared, before styled input validation done. The function gets passed one arguments: The rajaxObject object. You can use <code>rajaxObject.setData({'username':'roni','password':'123456'});</code> api to set custom data. You can return false to cancel submit\r\n\r\n* **onSubmit**  \r\nType: Function( Rajax rajaxObject, Object form )  \r\nA function to be called when the request ready to post, styled input validation done(after onBeforeSubmit callback are executed) just before submitting. The function gets passed two arguments: The rajaxObject object and the form object. You can return false to cancel submit\r\n\r\n* **onAfterSubmit**  \r\nType: Function( Rajax rajaxObject, Object form )  \r\nA function to be called just after submitting. The function gets passed two arguments: The rajaxObject object and the form object. For some Request We may not expect receive response from server. on those cases, we can use this callback to complete our action as the onComplete event may not fired\r\n\r\n* **onComplete**  \r\nType: Function( mix response, Rajax rajaxObject )  \r\nA function to be called when the request finishes (after all other callbacks are executed). The function gets passed two arguments: The response from server and The rajaxObject object.\r\n\r\n\r\nSFileInput Options:\r\n===================\r\n* **button**  \r\ntype: string  \r\nrequired : true  \r\nStyled Button Reference. Id of the html element we like to use as file input\r\n\r\n* **deniedType**  \r\nType: string  \r\nPipe line separated Denied file type(s) like <code>'image|document|audio'</code>\t[deny has more priority then acceptance]\r\n\r\n* **allowedType**  \r\nType: string  \r\nPipe line separated Allowed file type(s) like <code>'image|document|audio'</code>\r\n\r\n* **deniedExt**  \r\nType: string  \r\nPipe line separated Denied file extension(s) like <code>'doc|docx|gif'</code> Denied extension(s) used only if deniedType is 'custom'\r\n\r\n* **allowedExt**  \r\nType: string  \r\nPipe line separated Allowed file extension(s) like <code>'doc|docx|gif'</code> Denied extension(s) used only if allowedType is 'custom'\r\n\r\n* **hoverClass**  \r\ntype: string  \r\nClass applied to button when mouse is hovered\r\n\r\n* **focusClass**  \r\ntype: string  \r\nClass applied to button when button is focused\r\n\r\n* **disabledClass**  \r\ntype: string  \r\nClass applied to button when  when button is disabled\r\n\r\n* **multipleFile**  \r\ntype: boolean  \r\ndefault : false  \r\ncontrol allowing multiple file upload\r\n\r\n* **maximum**  \r\ntype: integer  \r\ndefault : 0 [unlimited]  \r\nNumber of maximum allowed file count in case of multiple file allowed\r\n\r\n* **required**  \r\ntype: boolean  \r\ndefault : false  \r\nSet it true if the input field is a required field\r\n\r\n* **showFileName**  \r\ntype: boolean  \r\ndefault : true  \r\nDisplay Selected File Name, set false, if you like to handle your self\r\n\r\n* **fileNameMaxLength**  \r\ntype: integer  \r\nMaximum lengths of file name will be shown without trimming. if the value is smaller then twice of file extension length it will have no effect.\r\n\r\n* **selectedFileLabel**  \r\ntype: string  \r\nId Of element you like to show the selected file name. Useful when you like to display file name in your own pre-existing element\r\n\r\n* **selectedFileClass**  \r\ntype: string  \r\nClass applied to selectedFileLabel  element\r\n\r\n* **multiInputRemoveClass**  \r\ntype: string  \r\nClass applied to selected file name  element\r\n\r\n* **nofileMsg**  \r\ntype: string  \r\nmessage to show on no selected file error\r\n\r\n* **maximumAllowedExceededMsg**  \r\ntype: string  \r\nMessage to show on file count exceeded maximumAllowed. You can use {n} place holder to display maximum allowed number\r\n\r\n* **onClear**  \r\nType: Function( SFileInput file)  \r\nA function to be called when the file input reseted or the form reseted. The function gets passed one arguments: The SFileInput object.\r\n\r\n* **onChange**  \r\nType: Function( String file, String extension )  \r\nA function to be called When user selects a file. useful with Custom validation. You can return false to cancel file selection. The function gets passed two arguments: The file name and the file extension.\r\n\r\n* **onDenied**  \r\nType: Function( String file, String extension )  \r\nA function to be called When user select any denied File. You can process file name and extension to show custom message. Return True to override native alert message. The function gets passed two arguments: The file name and the file extension.\r\n\r\n* **onAccept**  \r\nType: Function( String file, String extension )  \r\nA function to be called When user select any acceptable File You can process with file name and extension. Return false to cancel selection. Most of the time the function is not needed. The function gets passed two arguments: The file name and the file extension.\r\n\r\n* **onMaximumAllowedExceeded**  \r\nType: Function( SFileInput file, integer maximumAllowed )  \r\nA function to be called When selected file count exceed the maximum allowed file. You will have the opportunity to handle here. Most of the time the function is not needed. The function gets passed two arguments: The SFileInput object and the maximumAllowed count.\r\n\r\n* **showMessage**  \r\nType: Function( string message)  \r\nOverride the default message showing function. The function gets passed one arguments: The message.\r\n\r\n\r\n\r\nDependencies\r\n============\r\nTo use this library you only need javascript support. \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}